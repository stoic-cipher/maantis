---
// Compound eye visualization showing 16-receptor vision system
---

<div class="vision-container">
  <svg viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg" class="vision-svg">
    <defs>
      <!-- Spectrum gradients for different wavelengths -->
      <linearGradient id="uv-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:#8b5cf6;stop-opacity:0.8" />
        <stop offset="100%" style="stop-color:#6366f1;stop-opacity:0.6" />
      </linearGradient>

      <linearGradient id="visible-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:#00d9ff;stop-opacity:0.8" />
        <stop offset="50%" style="stop-color:#00b4d8;stop-opacity:0.6" />
        <stop offset="100%" style="stop-color:#90e0ef;stop-opacity:0.4" />
      </linearGradient>

      <linearGradient id="polarized-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:#f59e0b;stop-opacity:0.8" />
        <stop offset="100%" style="stop-color:#ef4444;stop-opacity:0.6" />
      </linearGradient>

      <filter id="vision-glow">
        <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
        <feMerge>
          <feMergeNode in="coloredBlur"/>
          <feMergeNode in="SourceGraphic"/>
        </feMerge>
      </filter>
    </defs>

    <!-- Central compound eye structure -->
    <g class="eye-structure" transform="translate(200, 200)">
      <!-- Outer eye boundary -->
      <circle cx="0" cy="0" r="120" fill="none" stroke="url(#visible-gradient)" stroke-width="2" opacity="0.3"/>

      <!-- Hexagonal ommatidia pattern -->
      <g class="ommatidia-grid" opacity="0.4">
        {Array.from({ length: 60 }).map((_, i) => {
          const angle = (i * 6 * Math.PI) / 180;
          const ring = Math.floor(i / 12) + 1;
          const radius = ring * 20;
          const x = Math.cos(angle) * radius;
          const y = Math.sin(angle) * radius;
          return (
            <g transform={`translate(${x}, ${y})`}>
              <polygon
                class="ommatidium"
                points="0,-8 7,-4 7,4 0,8 -7,4 -7,-4"
                fill="none"
                stroke="#00d9ff"
                stroke-width="0.5"
                style={`animation-delay: ${i * 0.05}s`}
              />
            </g>
          );
        })}
      </g>

      <!-- 16 color receptor bands (representing different wavelength sensitivities) -->
      <g class="receptor-bands">
        {Array.from({ length: 16 }).map((_, i) => {
          const angle = (i * 360) / 16;
          const radius = 90;
          const x1 = Math.cos((angle * Math.PI) / 180) * 40;
          const y1 = Math.sin((angle * Math.PI) / 180) * 40;
          const x2 = Math.cos((angle * Math.PI) / 180) * radius;
          const y2 = Math.sin((angle * Math.PI) / 180) * radius;

          // Determine color based on wavelength position
          let gradient = "visible-gradient";
          if (i < 4) gradient = "uv-gradient";
          else if (i > 12) gradient = "polarized-gradient";

          return (
            <line
              class={`receptor-line r${i}`}
              x1={x1}
              y1={y1}
              x2={x2}
              y2={y2}
              stroke={`url(#${gradient})`}
              stroke-width="2"
              opacity="0.6"
              style={`animation-delay: ${i * 0.1}s`}
            />
          );
        })}
      </g>

      <!-- Central focal point -->
      <circle cx="0" cy="0" r="15" fill="url(#visible-gradient)" opacity="0.8" filter="url(#vision-glow)"/>
      <circle cx="0" cy="0" r="8" fill="#00d9ff" opacity="0.9"/>
      <circle cx="0" cy="0" r="3" fill="#ffffff"/>

      <!-- Scanning arc -->
      <path
        class="scan-arc"
        d="M -80,-80 A 113 113 0 0 1 80,-80"
        fill="none"
        stroke="#00d9ff"
        stroke-width="1.5"
        opacity="0.6"
        stroke-linecap="round"
      />
    </g>

    <!-- Wavelength spectrum indicators -->
    <g class="spectrum-labels">
      <text x="50" y="200" fill="#8b5cf6" font-size="10" font-family="monospace">UV</text>
      <text x="200" y="50" fill="#00d9ff" font-size="10" font-family="monospace" text-anchor="middle">VISIBLE</text>
      <text x="340" y="200" fill="#f59e0b" font-size="10" font-family="monospace" text-anchor="end">POLARIZED</text>
    </g>
  </svg>

  <div class="vision-info">
    <div class="info-grid">
      <div class="info-item">
        <span class="info-number">16</span>
        <span class="info-label">Color Receptors</span>
      </div>
      <div class="info-item">
        <span class="info-number">300-720nm</span>
        <span class="info-label">Wavelength Range</span>
      </div>
      <div class="info-item">
        <span class="info-number">Circular</span>
        <span class="info-label">Polarization Detection</span>
      </div>
      <div class="info-item">
        <span class="info-number">Parallel</span>
        <span class="info-label">Visual Processing</span>
      </div>
    </div>
  </div>
</div>

<style>
  .vision-container {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }

  .vision-svg {
    width: 100%;
    height: auto;
    display: block;
  }

  /* Ommatidia pulse animation */
  .ommatidium {
    animation: ommatidiaPulse 3s ease-in-out infinite;
  }

  @keyframes ommatidiaPulse {
    0%, 100% {
      opacity: 0.3;
      stroke-width: 0.5;
    }
    50% {
      opacity: 0.8;
      stroke-width: 0.8;
    }
  }

  /* Receptor lines glow in sequence */
  .receptor-line {
    animation: receptorGlow 4s ease-in-out infinite;
  }

  @keyframes receptorGlow {
    0%, 100% {
      opacity: 0.6;
      stroke-width: 2;
    }
    50% {
      opacity: 1;
      stroke-width: 3;
    }
  }

  /* Scanning arc rotation */
  .scan-arc {
    transform-origin: center;
    animation: scanRotate 8s linear infinite;
  }

  @keyframes scanRotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Vision info panel */
  .vision-info {
    margin-top: var(--space-lg);
    padding: var(--space-lg);
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 8px;
  }

  .info-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-md);
  }

  .info-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: var(--space-sm);
    background: var(--color-surface-elevated);
    border: 1px solid var(--color-border);
    border-radius: 6px;
  }

  .info-number {
    font-family: var(--font-mono);
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-strike);
  }

  .info-label {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  @media (max-width: 640px) {
    .info-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
