---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    // Filter out draft posts in production
    return import.meta.env.PROD ? data.draft !== true : true;
  });

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();

function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}
---

<Layout title={post.data.title}>
  <article class="container">
    <header class="post-header">
      <a href="/blog" class="back-link">← Back to Blog</a>
      <h1>{post.data.title}</h1>
      <div class="post-meta">
        <time datetime={post.data.pubDate.toISOString()}>
          {formatDate(post.data.pubDate)}
        </time>
        {post.data.author && <span> • {post.data.author}</span>}
        {post.data.updatedDate && (
          <span class="updated">
            (Updated: {formatDate(post.data.updatedDate)})
          </span>
        )}
      </div>
      {post.data.tags.length > 0 && (
        <div class="tags">
          {post.data.tags.map((tag) => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      )}
      {post.data.description && (
        <p class="description">{post.data.description}</p>
      )}
    </header>

    <div class="prose">
      <Content />
    </div>
  </article>
</Layout>

<style>
  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: var(--space-2xl) var(--space-md);
    min-height: calc(100vh - var(--nav-height));
  }

  .post-header {
    margin-bottom: var(--space-2xl);
    padding-bottom: var(--space-xl);
    border-bottom: 2px solid var(--color-border);
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-text-secondary);
    text-decoration: none;
    margin-bottom: var(--space-md);
    font-size: 0.875rem;
    font-family: var(--font-mono);
    transition: color 0.2s;
  }

  .back-link:hover {
    color: var(--color-strike);
  }

  h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin-bottom: var(--space-md);
    color: var(--color-text-primary);
    font-weight: 700;
  }

  .post-meta {
    font-size: 0.875rem;
    color: var(--color-text-dim);
    margin-bottom: var(--space-md);
    font-family: var(--font-mono);
  }

  .updated {
    font-style: italic;
    color: var(--color-text-dim);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
    margin-bottom: var(--space-md);
  }

  .tag {
    background: var(--color-ocean);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
    color: var(--color-strike);
    border: 1px solid var(--color-border);
    font-family: var(--font-mono);
  }

  .description {
    font-size: 1.125rem;
    color: var(--color-text-secondary);
    font-style: italic;
    margin-top: var(--space-md);
    padding: var(--space-md);
    background: var(--color-surface);
    border-left: 4px solid var(--color-strike);
    border-radius: 4px;
  }

  /* Prose styling for markdown content */
  .prose {
    font-size: 1.0625rem;
    line-height: 1.75;
    color: var(--color-text-secondary);
  }

  .prose :global(h1),
  .prose :global(h2),
  .prose :global(h3),
  .prose :global(h4),
  .prose :global(h5),
  .prose :global(h6) {
    margin-top: var(--space-xl);
    margin-bottom: var(--space-md);
    line-height: 1.3;
    color: var(--color-text-primary);
    font-weight: 600;
  }

  .prose :global(h2) {
    font-size: 2rem;
    padding-bottom: var(--space-sm);
    border-bottom: 1px solid var(--color-border);
  }

  .prose :global(h3) {
    font-size: 1.5rem;
  }

  .prose :global(p) {
    margin-bottom: var(--space-md);
  }

  .prose :global(strong) {
    color: var(--color-text-primary);
    font-weight: 600;
  }

  .prose :global(a) {
    color: var(--color-strike);
    text-decoration: none;
    border-bottom: 1px solid var(--color-strike-dim);
    transition: all 0.2s;
  }

  .prose :global(a:hover) {
    color: var(--color-accent);
    border-bottom-color: var(--color-accent);
  }

  .prose :global(ul),
  .prose :global(ol) {
    margin-bottom: var(--space-md);
    padding-left: 2rem;
  }

  .prose :global(li) {
    margin-bottom: var(--space-xs);
  }

  .prose :global(code) {
    background: var(--color-surface);
    color: var(--color-strike);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-size: 0.9em;
    font-family: var(--font-mono);
    border: 1px solid var(--color-border);
  }

  .prose :global(pre) {
    background: var(--color-surface);
    padding: var(--space-md);
    border-radius: 8px;
    overflow-x: auto;
    margin-bottom: var(--space-md);
    border: 1px solid var(--color-border);
  }

  .prose :global(pre code) {
    background: none;
    padding: 0;
    color: var(--color-text-secondary);
    border: none;
  }

  .prose :global(blockquote) {
    border-left: 4px solid var(--color-strike);
    padding-left: var(--space-md);
    margin-left: 0;
    margin-bottom: var(--space-md);
    color: var(--color-text-secondary);
    font-style: italic;
    background: var(--color-surface);
    padding: var(--space-md);
    border-radius: 4px;
  }

  .prose :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: var(--space-xl) 0;
    border: 1px solid var(--color-border);
  }

  .prose :global(hr) {
    border: none;
    border-top: 2px solid var(--color-border);
    margin: var(--space-2xl) 0;
  }

  .prose :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: var(--space-md);
  }

  .prose :global(th),
  .prose :global(td) {
    border: 1px solid var(--color-border);
    padding: 0.75rem;
    text-align: left;
  }

  .prose :global(th) {
    background: var(--color-surface);
    font-weight: 600;
    color: var(--color-text-primary);
  }

  .prose :global(td) {
    color: var(--color-text-secondary);
  }

  /* Task lists */
  .prose :global(input[type='checkbox']) {
    margin-right: 0.5rem;
    cursor: pointer;
  }

  .prose :global(ul:has(input[type='checkbox'])) {
    list-style: none;
  }

  .prose :global(li:has(input[type='checkbox'])) {
    display: flex;
    align-items: flex-start;
  }

  /* Strikethrough */
  .prose :global(del) {
    text-decoration: line-through;
    opacity: 0.7;
  }

  /* Footnotes */
  .prose :global(.footnotes) {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 2px solid #e0e0e0;
    font-size: 0.9rem;
    color: #666;
  }

  @media (max-width: 640px) {
    h1 {
      font-size: 2rem;
    }

    .prose {
      font-size: 1rem;
    }

    .prose :global(h2) {
      font-size: 1.5rem;
    }

    .prose :global(h3) {
      font-size: 1.25rem;
    }
  }
</style>
